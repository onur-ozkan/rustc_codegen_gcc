name: CI libgccjit 12

on:
  - push
  - pull_request

permissions:
  contents: read

env:
  # Enable backtraces for easier debugging
  RUST_BACKTRACE: 1
  TEST_FLAGS: "-Cpanic=abort -Zpanic-abort-tests"

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        commands: [
          "--mini-tests",
          "--std-tests",
          # FIXME: re-enable asm tests when GCC can emit in the right syntax.
          # "--asm-tests",
          "--test-libcore",
          "--extended-rand-tests",
          "--extended-regex-example-tests",
          "--extended-regex-tests",
          "--test-successful-rustc --nb-parts 2 --current-part 0",
          "--test-successful-rustc --nb-parts 2 --current-part 1",
          "--test-failing-rustc",
        ]

    steps:
    - uses: actions/checkout@v3

    - uses: actions/checkout@v3
      with:
        repository: llvm/llvm-project
        path: llvm

    - name: Install packages
      # `llvm-14-tools` is needed to install the `FileCheck` binary which is used for asm tests.
      run: sudo apt-get install ninja-build ripgrep llvm-14-tools

    - name: Install libgccjit12
      run: sudo apt-get install libgccjit-12-dev

    - name: Setup path to libgccjit
      run: echo /usr/lib/gcc/x86_64-linux-gnu/12 > gcc_path

    - name: Set env
      run: |
        echo "LIBRARY_PATH=$(cat gcc_path)" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$(cat gcc_path)" >> $GITHUB_ENV
        echo "workspace="$GITHUB_WORKSPACE >> $GITHUB_ENV

    - name: Set RUST_COMPILER_RT_ROOT
      run: echo "RUST_COMPILER_RT_ROOT="${{ env.workspace }}/llvm/compiler-rt >> $GITHUB_ENV

    - name: Cache cargo installed crates
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin
        key: cargo-installed-crates2-ubuntu-latest

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry2-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo target dir
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain') }}

    #- name: Cache rust repository
      ## We only clone the rust repository for rustc tests
      #if: ${{ contains(matrix.commands, 'rustc') }}
      #uses: actions/cache@v3
      #id: cache-rust-repository
      #with:
        #path: rust
        #key: ${{ runner.os }}-packages-${{ hashFiles('rust/.git/HEAD') }}

    - name: Build
      run: |
        ./prepare_build.sh
        ./build.sh --no-default-features
        cargo test --no-default-features
        ./clean_all.sh

    - name: Prepare dependencies
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"
        ./prepare.sh

    # Compile is a separate step, as the actions-rs/cargo action supports error annotations
    - name: Compile
      uses: actions-rs/cargo@v1.0.3
      with:
        command: build
        args: --release

    - name: Add more failing tests for GCC 12
      run: cat failing-ui-tests12.txt >> failing-ui-tests.txt

    - name: Run tests
      run: |
        ./test.sh --release --clean --build-sysroot ${{ matrix.commands }} --no-default-features

  duplicates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: python tools/check_intrinsics_duplicates.py
